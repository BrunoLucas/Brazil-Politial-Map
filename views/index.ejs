<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Mapa - Case eleições 2014</title>
  <link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css" />
  <style>
  *{
    margin:0;
    padding:0;
    -webkit-box-sizing:border-box;
    -moz-box-sizing:border-box;
    box-sizing:border-box;
  }
  body,html,#brasilmap{
    height:100%;
  }
  body{
    color:#333;
    font-family:sans-serif;
  }
  #brasilmap{
    background:white;
  }
  .country-name{
    position: absolute;
    top:2em;
    right:1em;
    z-index:6;
    background:rgba(0,0,0,.75);
    color:white;
    padding:.5em .75em;
    font-size:.85em;
    display:none;
  }
  </style>
</head>
<body>
  <h2>Mapa de Primeiro Turno - 2014</h2>
  <div id="brasilmap"></div>

  <script src="http://cdnjs.cloudflare.com/ajax/libs/chroma-js/0.5.9/chroma.min.js"></script>
  <script src="https://code.jquery.com/jquery-2.1.1.min.js"></script>  
  <script src="http://d3js.org/topojson.v1.min.js"></script>
  <script src="http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js"></script>
  <script>
    // Copyright (c) 2013 Ryan Clark
    // https://gist.github.com/rclark/5779673
    L.TopoJSON = L.GeoJSON.extend({
      addData: function(jsonData) {    
        if (jsonData.type === "Topology") {
          for (key in jsonData.objects) {
            geojson = topojson.feature(jsonData, jsonData.objects[key]);
            L.GeoJSON.prototype.addData.call(this, geojson);
          }
        }    
        else {
          L.GeoJSON.prototype.addData.call(this, jsonData);
        }
      }  
    });
  </script>
  <script>
    (function(){
    'use strict'
      
    var map = L.map('brasilmap',{maxZoom:10,minZoom:4}),
      topoLayer = new L.TopoJSON(),
      $countryName = $('.country-name'),
      colorScale = chroma
        .scale(['#D5E3FF', '#003171'])
        .domain([0,1]);
    
    map.setView([-20,-50], 4);
    $.getJSON('resources/brasil.json').done(addTopoData);
    function addTopoData(topoData){
      topoLayer.addData(topoData);
      topoLayer.addTo(map);
      topoLayer.eachLayer(handleLayer);
    }

$.getJSON('resources/resultado-1-turno.json').done(addTopoData);

function getArray(){
    return $.getJSON('resources/partidos.json');
}

function getArrayPrimeiroTurno(){
    return $.getJSON('resources/resultado-1-turno.json');
}
var municipios =  [];
getArrayPrimeiroTurno().done(function (resultado){
 
  resultado.forEach( r =>{

    if(!eUmEstado(r[0])){
      let partidoMaisVotado;
      let quantidadeVotos = 0;
      for(let i=6; i < r.length; i++){
       if(r[i][3] > quantidadeVotos){
         quantidadeVotos = r[i][3];
         partidoMaisVotado = r[i][0];
       }
      
      }

      municipios.push({'codigo' : r[1], 'partidoMaisVotado' : partidoMaisVotado});
    }
  });

});
    function eUmEstado(objeto){
        if(objeto == 'UF'){
          return true;
        }else{
          return false;
        }
    }


    function handleLayer(layer){

       municipios.forEach(function(municipio){

         if(layer.feature.properties.CD_GEOCODM == municipio.codigo){
           let cor = '';
           getArray().done(function (partido) {
            
            Object.entries(partido).forEach(function(p){
              if(municipio.partidoMaisVotado ==  p[0]){
                  cor = '#'+ p[1].cor_media;
         
                  layer.setStyle({
                    fillColor : cor,
                    fillOpacity: 1,
                    weight:.9,
                    opacity:.5
                  });
              }
            
            });
              
          });

         }
       });

    }

    }());
  </script>
</body>
</html>